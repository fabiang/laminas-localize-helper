<?php

namespace Fabiang\LocalizeHelper;

use PHPUnit_Framework_TestCase as TestCase;
use Zend\ServiceManager\ServiceLocatorInterface;
use Zend\ServiceManager\ServiceManager;
use Zend\I18n\Validator\DateTime as Validator;
use Zend\I18n\Filter\Alnum as Filter;
use Zend\I18n\View\Helper\DateFormat as ViewHelper;
use Zend\Mvc\I18n\Translator as MvcTranslator;
use Zend\I18n\Translator\Translator as Translator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-28 at 13:09:06.
 *
 * @coversDefaultClass Fabiang\LocalizeHelper\LocaleInitializer
 */
final class LocaleInitializerTest extends TestCase
{
    /**
     * @var LocaleInitializer
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new LocaleInitializer();
    }

    /**
     * @test
     * @covers ::__invoke
     * @covers ::getLocale
     */
    public function testInvoke()
    {
        $validator  = $this->prophesize(Validator::class);
        $validator->setLocale('en_US')->shouldBeCalled();
        $filter     = $this->prophesize(Filter::class);
        $filter->setLocale('en_US')->shouldBeCalled();
        $viewHelper = $this->prophesize(ViewHelper::class);
        $viewHelper->setLocale('en_US')->shouldBeCalled();

        $translator = $this->prophesize(Translator::class);
        $translator->getLocale()->willReturn('en_US');

        $mvcTranslator = $this->prophesize(MvcTranslator::class);
        $mvcTranslator->getTranslator()->willReturn($translator->reveal());

        $container = $this->prophesize(ServiceLocatorInterface::class);
        $container->has('MvcTranslator')->willReturn(true);
        $container->get('MvcTranslator')->willReturn($mvcTranslator->reveal());

        $this->object->__invoke($container->reveal(), $validator->reveal());
        $this->object->__invoke($container->reveal(), $filter->reveal());
        $this->object->__invoke($container->reveal(), $viewHelper->reveal());
    }

    /**
     * @covers ::getLocale
     */
    public function testInvokeNoMvcTranslator()
    {
        $container = $this->prophesize(ServiceLocatorInterface::class);
        $container->has('MvcTranslator')->willReturn(false);

        $validator  = $this->prophesize(Validator::class);
        $validator->setLocale()->shouldNotBeCalled();

        $this->object->__invoke($container->reveal(), $validator->reveal());
    }

    /**
     * @covers ::initialize
     */
    public function testInitialize()
    {
        $sm = new ServiceManager();
        if (!method_exists($sm, 'getServiceLocator')) {
            $this->markTestSkipped();
        }

        $validator  = $this->prophesize(Validator::class);
        $validator->setLocale('en_US')->shouldBeCalled();

        $translator = $this->prophesize(Translator::class);
        $translator->getLocale()->willReturn('en_US');

        $mvcTranslator = $this->prophesize(MvcTranslator::class);
        $mvcTranslator->getTranslator()->willReturn($translator->reveal());

        $container = $this->prophesize(ServiceLocatorInterface::class);
        $container->has('MvcTranslator')->willReturn(true);
        $container->get('MvcTranslator')->willReturn($mvcTranslator->reveal());

        $globalContainer = $this->prophesize(ServiceManager::class);
        $globalContainer->getServiceLocator()->willReturn($container);
        
        $this->object->initialize(
            $validator->reveal(),
            $globalContainer->reveal()
        );
    }
}
